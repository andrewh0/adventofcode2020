import Foundation

let input = """
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL
.......L.L.....LL..L....LLL...L...........L.....L...LL...L.....L..LL..L..L.L...L........L.L
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL
LLL.LL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.
LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLL..LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
L.LLL..L...L.L.......L....L..LLL........LLL..L..L....LLLLLLL.......L.L...L........LL.L..L..
LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL
.L..LLLLL.....L..L...L....L..LLL.L.....L......L..LL......L.L...LLL..LLLL......LL.L.L...L...
LLLLLLL.LL.LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LL.LLLLLLL.LLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL..LLLLLLL.LLLLLL
LLLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLL.L
LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLL.L
LLLLLLL.LLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLL
L..........LLL....LL...............L.....L.......L......L..L.L...L..LL.......L..L...L....LL
LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL..LLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLL.LLL.LLLLLL
LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLL.LLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLL
L...L..L..L.L...L..L.L.....L....L..L...L....L.LL..L.L...L.L.LL....LL..L..L......L.L...L..L.
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLL.L.LLLLL.LLLLL..LLLLLLL.LLLLLL
LLLLLL.LLLLLLL.L.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLL.LL.LLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL
....L....L.L..LL.L...LLL.L.L..L........L..L..L....L..LL..L.L....L......LL.L.......L.LL....L
LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL
..L..L..LLL..L...L.......LL..L..LLLL.L....L.LLL.L...L...LL...LL.L.L......L.......L....LL.L.
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LL.LL.LLLLL.LLLLLLLL.LLLLLL
LLLLL..LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
L...LLLLLLLL..L....L.L....L...LL..L.LL..L.L.L.L..L....L.....LL.........LL.L.....L.LL..L...L
LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.L.LLLLLLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLL.L.LLLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.L.LLLLLLLLLLLLLLL.LLLLL.L.LLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLL.LLLLLLLLL.LLL.LLLLL.LLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLL..LLLLLL
.L..LL....L..L.LL.......L.L.L.........L...L.L...LL......LL..L...L..L.L.L..L........L....L.L
LLLLLLL.LLLLLLLL.LLLLLLL..LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.L.LLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL
..LL..L.LL..L........L.L..L.....L.L..L.L.....LL.LL...L....L..LL.L...LLLLL.L.L.....L.......L
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLL.LL
LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLLLLL
L.L..........L.L...LL...L....L..L.L..L.........LL...L..L...L...L.L.LLL.L.....LL....L......L
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLL..LLLLLLLLLLLLLL.LLLLLLLLLLLLL.LL.LLLLLLLLLLL.LLLLLL
LLLLLL.LL.LLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL..LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLL.LL.LL.LLLLLLLLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL.LLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLL
LLLLLL.LLLLLLLLL.LLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLL.LLLLLL
LLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL
"""

let input2 = """
L.LL.LL.LL
LLLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLLL
L.LLLLLL.L
L.LLLLL.LL
"""

let seatMatrix = input.components(separatedBy: "\n").map { Array($0).map { c in String(c) } }

func isValidRow(r: Int, seatMatrix: [[String]]) -> Bool {
    return r < seatMatrix.count && r >= 0
}

func isValidCol(c: Int, seatMatrix: [[String]]) -> Bool {
    let row = seatMatrix[0]
    return c < row.count && c >= 0
}

func getNextSeat(r: Int, c: Int, seatMatrix: [[String]]) -> String {
    let thisSeat = seatMatrix[r][c]
    if thisSeat == "." {
        return "."
    }
    let adjacentCoords = [
        (r - 1, c - 1), (r - 1, c), (r - 1, c + 1),
        (r, c - 1), (r, c + 1),
        (r + 1, c - 1), (r + 1, c), (r + 1, c + 1),
    ]
    var adjacentOccupiedSeats = 0
    for tup in adjacentCoords {
        let (adjacentR, adjacentC) = tup
        if isValidRow(r: adjacentR, seatMatrix: seatMatrix), isValidCol(c: adjacentC, seatMatrix: seatMatrix) {
            if seatMatrix[adjacentR][adjacentC] == "#" {
                adjacentOccupiedSeats += 1
            }
        }
    }
    if thisSeat == "L", adjacentOccupiedSeats == 0 {
        return "#"
    } else if thisSeat == "#", adjacentOccupiedSeats >= 4 {
        return "L"
    } else {
        return thisSeat
    }
}

func getOccupiedSeatsInVisibleDirections(r: Int, c: Int, seatMatrix: [[String]]) -> Int {
    var visibleOccupiedSeats = 0
    let incrementers = [
        (-1, -1), (-1, 0), (-1, 1),
        (0, -1), (0, 1),
        (1, -1), (1, 0), (1, 1),
    ]
    for incrementer in incrementers {
        let (rIncrement, cIncrement) = incrementer
        var currR = r
        var currC = c
        while isValidRow(r: currR + rIncrement, seatMatrix: seatMatrix), isValidCol(c: currC + cIncrement, seatMatrix: seatMatrix) {
            if seatMatrix[currR + rIncrement][currC + cIncrement] == "L" {
                break
            }
            if seatMatrix[currR + rIncrement][currC + cIncrement] == "#" {
                visibleOccupiedSeats += 1
                break
            }
            currR += rIncrement
            currC += cIncrement
        }
    }
    return visibleOccupiedSeats
}

func getNextSeat2(r: Int, c: Int, seatMatrix: [[String]]) -> String {
    let thisSeat = seatMatrix[r][c]
    if thisSeat == "." {
        return "."
    }
    let visibleOccupiedSeats = getOccupiedSeatsInVisibleDirections(r: r, c: c, seatMatrix: seatMatrix)
    if thisSeat == "L", visibleOccupiedSeats == 0 {
        return "#"
    } else if thisSeat == "#", visibleOccupiedSeats >= 5 {
        return "L"
    } else {
        return thisSeat
    }
}

func makeNextRound(seatMatrix: [[String]], nextSeatGetter: (Int, Int, [[String]]) -> String) -> ([[String]], Bool) {
    var hasChanged = false
    var nextSeatMatrix = [[String]]()
    for i in 0 ..< seatMatrix.count {
        var row = [String]()
        for j in 0 ..< seatMatrix[0].count {
            let nextSeat = nextSeatGetter(i, j, seatMatrix)
            if nextSeat != seatMatrix[i][j] {
                hasChanged = true
            }
            row.append(nextSeat)
        }
        nextSeatMatrix.append(row)
    }
    return (nextSeatMatrix, hasChanged)
}

func countOccupiedSeats(seatMatrix: [[String]]) -> Int {
    var occupiedSeats = 0
    for i in 0 ..< seatMatrix.count {
        for j in 0 ..< seatMatrix[0].count {
            if seatMatrix[i][j] == "#" {
                occupiedSeats += 1
            }
        }
    }
    return occupiedSeats
}

func getFinalOccupiedSeats(seatMatrix: [[String]], nextSeatGetter: (Int, Int, [[String]]) -> String) -> Int {
    var currSeatMatrix = seatMatrix
    var hasChanged = true
    while hasChanged {
        let (nextSeatMatrix, nextHasChanged) = makeNextRound(seatMatrix: currSeatMatrix, nextSeatGetter: nextSeatGetter)
        hasChanged = nextHasChanged
        currSeatMatrix = nextSeatMatrix
        // printSeats(seatMatrix: currSeatMatrix)
    }
    return countOccupiedSeats(seatMatrix: currSeatMatrix)
}

func printSeats(seatMatrix: [[String]]) {
    for r in 0 ..< seatMatrix.count {
        print(seatMatrix[r])
    }
    print("____________")
}

func part1() -> Int {
    return getFinalOccupiedSeats(seatMatrix: seatMatrix, nextSeatGetter: getNextSeat)
}

print(part1())

func part2() -> Int {
    return getFinalOccupiedSeats(seatMatrix: seatMatrix, nextSeatGetter: getNextSeat2)
}

print(part2())
